input {
  jdbc {
    jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
    jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
    jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
    jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
    jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
    schedule => "* * * * *"
    statement => "SELECT cont.id AS content_id, (SELECT 'SERIE') AS content_type, cont.title, cont.poster, cont.releasedYear,
      ent.price,
      gen.name AS genre,
      ser.id AS serie_id, ser.description AS serie_description,
      sea.number AS season,
      epi.id AS episode_id, epi.url AS episode_url, epi.title AS episode_title, epi.number AS episode_number,
      role.description, role.roleName,act.firstName AS first_name, act.lastName AS last_name,
      img.prefix, img.suffix, img.url AS image_url, img.usage, img.imageSource, img.format,
      plvl.restricted, plvl.rating, plvl.ratingId, plvl.ratingType, plvl.suggestiveDialog, plvl.language, plvl.sexRating, plvl.violence, plvl.fantasyViolence
      FROM atenea.contents cont
      LEFT JOIN atenea.entitlements ent ON cont.id = ent.contentId
      LEFT JOIN atenea.parentalLevels plvl ON cont.id = plvl.contentId
      LEFT JOIN atenea.images img ON cont.id = img.contentId
      LEFT JOIN atenea.roles role ON cont.id = role.contentId 
      LEFT JOIN atenea.actors act ON act.id = role.actorId 
      LEFT JOIN atenea.content_genre cont_gen ON cont.id = cont_gen.content_id
      LEFT JOIN atenea.genres gen ON gen.id = cont_gen.genre_id
      INNER JOIN atenea.series ser ON cont.id = ser.contentId
      LEFT JOIN atenea.seasons sea ON ser.id = sea.seriesId
      LEFT JOIN atenea.episodes epi ON sea.id = epi.seasonId
      ORDER BY content_id;"
  }
}

filter{
  aggregate {
    task_id => "%{content_id}"
    code => "
      map['content_id'] ||= event.get('content_id')
      map['content_type'] ||= event.get('content_type')
      map['title'] ||= event.get('title')
      map['poster'] ||= event.get('poster')
      map['releasedYear'] ||= event.get('releasedYear')
      map['price'] ||= event.get('price')

      map['episodes'] ||=[]
      episode = {
        'title' => event.get('episode_title'),
        'season' => event.get('season'),
        'number' => event.get('episode_number'),
        'url' => event.get('episode_url'),
      }
      if ! map['episodes'].include?(episode)
        map['episodes'] << episode
      end

      map['genres'] ||=[]
      genre = event.get('genre')
      if ! map['genres'].include?(genre)
        map['genres'] <<=  genre
      end

      map['actors'] ||=[]
      actor = {
        'description' => event.get('description'),
        'roleName' => event.get('roleName'),
        'first_name' => event.get('first_name'),
        'last_name' => event.get('last_name')
      }
      if ! map['actors'].include?(actor)
        map['actors'] <<  actor
      end

      map['image'] ||= {
        'prefix' => event.get('prefix'),
        'suffix' => event.get('suffix'),
        'image_url' => event.get('image_url'),
        'usage' => event.get('usage'),
        'imageSource' => event.get('imageSource'),
        'format' => event.get('format')
      }
      map['parentalLevel'] ||= {
        'restricted' => event.get('restricted'),
        'rating' => event.get('rating'),
        'ratingId' => event.get('ratingId'),
        'ratingType' => event.get('ratingType'),
        'suggestiveDialog' => event.get('suggestiveDialog'),
        'language' => event.get('language'),
        'sexRating' => event.get('sexRating'),
        'violence' => event.get('violence'),
        'fantasyViolence' => event.get('fantasyViolence')
        }
    event.cancel()"
    push_previous_map_as_event => true
    timeout => 3
  }
  fingerprint{
    source => "[content_id]"
    method => "SHA256"
    key => "atenea"
    target => "[@metadata][fingerprint]"
  }
}

output {
    stdout { codec => rubydebug }
    elasticsearch {
      hosts => ["${LOGSTASH_ELASTICSEARCH_HOST}"]
      index => "contents_logstash"
      document_id => "%{[@metadata][fingerprint]}"
    }
}
